package dpla.ingestion3.mappers

import dpla.ingestion3.mappers.utils._
import dpla.ingestion3.messages.{IngestMessage, IngestMessageTemplates, MessageCollector}
import dpla.ingestion3.model.DplaMapData.{ExactlyOne, ZeroToMany, ZeroToOne}
import dpla.ingestion3.model._
import dpla.ingestion3.utils.Utils._
import org.json4s.DefaultFormats
import org.json4s.JsonAST._

import scala.util.{Failure, Success, Try}
import scala.xml.NodeSeq

trait Mapper[T, +E] extends IngestMessageTemplates {
  implicit val formats: DefaultFormats.type = DefaultFormats

  def map(document: Document[T], mapping: Mapping[T]): OreAggregation

  /**
    * Performs validation checks against dataProvider values
    * If more than one value was provided, then only the first will be returned
    * If no value was provided, an empty EdmAgent is return and an error message is logged
    *
    * @param values Values generated by provider mapping
    * @param providerId Local provider identifier
    * @param collector Ingest message collector
    * @return Returns mapped EdmAgent or an empty EdmAgent if none mapped
    */
  def validateDataProvider(values: ZeroToMany[EdmAgent], providerId: String)
                          (implicit collector: MessageCollector[IngestMessage]): EdmAgent = {
    // Check for more than one dataProvider mapped
    if (values.size > 1) {
      collector.add(moreThanOneValueInfo(providerId, "dataProvider", values.map(_.print).mkString(" | ")))
    }

    // Check for required field
    values.headOption match {
      case Some(dataProvider) => dataProvider
      case None => collector.add(missingRequiredError(providerId, "dataProvider"))
        emptyEdmAgent
    }
  }

  /**
    * Performs validation checks against edmRights values
    * If size of values greater than one, log a warning
    * Checks that all values are mintable java.net.URIs, logs warning if not
    * Returns the first validated URI
    *
    * @param values Values generated by edmRights mapping
    * @param providerId Local provider identifier
    * @param collector Ingest message collector
    * @return Option[URI] edmRights URI
    */
  def validateEdmRights(values: ZeroToMany[URI], providerId: String)
                       (implicit collector: MessageCollector[IngestMessage]): ZeroToOne[URI] = {
    // Check for more than one dataProvider mapped
    if (values.size > 1) { collector.add(moreThanOneValueInfo(providerId, "edmRights", values.mkString(" | "))) }
    values.foreach(value => {
      if (!value.validate)
        collector.add(mintUriError(providerId, "edmRights", value.toString))
    })
    values.find(_.validate)
  }

  /**
    * Performs validation checks against isShownAt values
    * If size of values greater than one log a warning message
    * If size of values equals zero than log an error message
    *
    * @param values Values generated by isShownAt mapping
    * @param providerId Local provider identifier
    * @param collector Ingest message collector
    * @return ExactlyOne[EdmWebResource] First mapped EdmWebResource or empty EdmWebResource
    */
  def validateIsShownAt(values: ZeroToMany[EdmWebResource], providerId: String)
                       (implicit collector: MessageCollector[IngestMessage]): ExactlyOne[EdmWebResource] = {
    // Check for more than one dataProvider mapped
    if (values.size > 1) { collector.add(moreThanOneValueInfo(providerId, "isShownAt", values.mkString(" | "))) }
    values.headOption match {
      case Some(url) => url
      case None => collector.add(missingRequiredError(providerId, "isShownAt"))
        emptyEdmWebResource
    }
  }

  /**
    * Performs validation checks against object values
    * Logs a warning if more than one value provided and returns the head value
    *
    * @param values Values generated by object mapping
    * @param providerId Local provider identifier
    * @param collector Ingest message collector
    * @return Option[EdmWebResource] preview EdmWebResource
    */
  def validateObject(values: ZeroToMany[EdmWebResource], providerId: String)
                       (implicit collector: MessageCollector[IngestMessage]): ZeroToOne[EdmWebResource] = {
    // Check for more than one dataProvider mapped
    if (values.size > 1) {
      collector.add(moreThanOneValueInfo(providerId, "object", values.toString()))
    }
    values.headOption
  }

  /**
    * Performs validation checks against preview values, expects only one value.
    * Logs a warning if more than one value provided and returns the head value
    *
    * @param values Values generated by preview mapping
    * @param providerId Local provider identifier
    * @param collector Ingest message collector
    * @return Option[EdmWebResource] preview EdmWebResource
    */
  def validatePreview(values: ZeroToMany[EdmWebResource], providerId: String)
                    (implicit collector: MessageCollector[IngestMessage]): ZeroToOne[EdmWebResource] = {
    // Check for more than one dataProvider mapped
    if (values.size > 1) {
      collector.add(moreThanOneValueInfo(providerId, "preview", values.mkString(" | ")))
    }
    values.headOption
  }

  /**
    * Validates the presence of at least one value in a given optional but recommended field
    *
    * @param values Seq                   Values
    * @param field String                 Name of field being validated
    * @param providerId String            Local provider identifier
    * @param collector MessageCollector   Ingest message collector
    */
  def validateRecommendedProperty[T](values: ZeroToMany[T], field: String, providerId: String)
                                (implicit collector: MessageCollector[IngestMessage]): ZeroToMany[T] = {
    if (values.isEmpty) {
      collector.add(missingRecommendedWarning(providerId, field))
    }
    values
  }

  /**
    * Compares rights and edmRights and logs an error message if neither is set
    * and a warning message if both are set
    *
    * @param rights Values returned from rights mapping
    * @param edmRights Values returned from edmRights mapping
    * @param providerId The provider's local identifier
    * @param collector Message collector
    */
  def validateRights(rights: ZeroToMany[String], edmRights: ZeroToMany[URI], providerId: String)
                    (implicit collector: MessageCollector[IngestMessage]): Unit = {
    (rights.isEmpty, edmRights.isEmpty) match {
      case(true, true) => collector.add(missingRights(providerId))
      case(false, false) => collector.add(duplicateRights(providerId))
      case(_,_) => // do nothing
    }
  }

  /**
    * Validates the presence of at least one title (required property)
    * and logs a missing required property error if the Seq is empty
    *
    * @param titles Seq[String]           Values returned from rights mapping
    * @param providerId String            The provider's local identifier
    * @param collector MessageCollector   Ingest message collector
    */
  def validateTitle(titles: ZeroToMany[String], providerId: String)
                   (implicit collector: MessageCollector[IngestMessage]): ZeroToMany[String] = {
    if(titles.isEmpty) {
      collector.add(missingRequiredError(providerId, "title"))
    }
    titles
  }

  /**
    * Performs validation checks against originalId values
    * If no value was provided, an empty String is return and an error message is logged
    *
    * @param values Values generated by provider mapping
    * @param providerId Local provider identifier
    * @param collector Ingest message collector
    * @return Returns mapped String or an empty String if none mapped
    */
  def validateOriginalId(values: ZeroToOne[String], providerId: String)
                        (implicit collector: MessageCollector[IngestMessage]): String = {

    values match {
      case Some(originalId) => originalId
      case None => collector.add(missingRequiredError(providerId, "originalId"))
        ""
    }
  }

  /**
    * Performs validation checks against originalId values
    * If no value was provided, an empty String is return and an error message is logged
    *
    * @param values Values generated by provider mapping
    * @param providerId Local provider identifier
    * @param collector Ingest message collector
    * @return Returns mapped URI or an empty URI if none mapped
    */
  def validateDplaUri(values: Option[URI], providerId: String)
                     (implicit collector: MessageCollector[IngestMessage]): URI = {

    values match {
      case Some(dplaUri) => {
        if (!dplaUri.validate) {
          collector.add(mintUriError(providerId, "dplaUri", dplaUri.toString))
          URI("")
        } else dplaUri
      }
      case None => {
        collector.add(missingRequiredError(providerId, "dplaUri"))
        URI("")
      }
    }
  }
}

class XmlMapper extends Mapper[NodeSeq, XmlMapping] {
  override def map(document: Document[NodeSeq], mapping: Mapping[NodeSeq]): OreAggregation = {

    implicit val msgCollector: MessageCollector[IngestMessage] = new MessageCollector[IngestMessage]
    val providerId = Try {
      (mapping.sidecar(document) \\ "prehashId")
    } match {
      case Success(s) => s.extractOrElse[String]("Unknown")
      case Failure(f) => s"Fatal error - Missing required ID $document"
    }

    // Field validation
    val validatedDataProvider = validateDataProvider(mapping.dataProvider(document), providerId)
    val validatedEdmRights = validateEdmRights(mapping.edmRights(document), providerId)
    val validatedIsShownAt = validateIsShownAt(mapping.isShownAt(document), providerId)
    val validatedObject = validateObject(mapping.`object`(document), providerId)
    val validatedPreview = validatePreview(mapping.preview(document), providerId)
    val validatedTitle = validateTitle(mapping.title(document), providerId)
    val validatedOriginalId = validateOriginalId(mapping.originalId(document), providerId)
    val validatedDplaUri = validateDplaUri(mapping.dplaUri(document), providerId)

    validateRights(mapping.rights(document), mapping.edmRights(document), providerId)

    // Recommended field validation
    val validatedCreator = validateRecommendedProperty(mapping.creator(document), "creator", providerId)
    val validatedDate = validateRecommendedProperty(mapping.date(document), "date", providerId)
    val validatedDescription = validateRecommendedProperty(mapping.description(document), "description", providerId)
    val validatedFormat = validateRecommendedProperty(mapping.format(document), "format", providerId)
    val validatedLanguage = validateRecommendedProperty(mapping.language(document), "language", providerId)
    val validatedPlace = validateRecommendedProperty(mapping.place(document), "place", providerId)
    val validatedPublisher = validateRecommendedProperty(mapping.publisher(document), "publisher", providerId)
    val validatedSubject = validateRecommendedProperty(mapping.subject(document), "subject", providerId)
    val validatedType = validateRecommendedProperty(mapping.`type`(document), "type", providerId)

    Try {
      OreAggregation(
        dplaUri = validatedDplaUri,
        dataProvider = validatedDataProvider,
        edmRights = validatedEdmRights,
        hasView = mapping.hasView(document),
        intermediateProvider = mapping.intermediateProvider(document),
        isShownAt = validatedIsShownAt,
        `object` = validatedObject, // full size image
        originalRecord = formatXml(document.get),
        preview = validatedPreview, // thumbnail
        provider = mapping.provider(document),
        sidecar = mapping.sidecar(document),
        sourceResource = DplaSourceResource(
          alternateTitle = mapping.alternateTitle(document),
          collection = mapping.collection(document),
          contributor = mapping.contributor(document),
          creator = validatedCreator,
          date = validatedDate,
          description = validatedDescription,
          extent = mapping.extent(document),
          format = validatedFormat,
          genre = mapping.genre(document),
          identifier = mapping.identifier(document),
          language = validatedLanguage,
          place = validatedPlace,
          publisher = validatedPublisher,
          relation = mapping.relation(document),
          replacedBy = mapping.replacedBy(document),
          replaces = mapping.replaces(document),
          rights = mapping.rights(document),
          rightsHolder = mapping.rightsHolder(document),
          subject = validatedSubject,
          temporal = mapping.temporal(document),
          title = validatedTitle,
          `type` = validatedType
        ),
        originalId = validatedOriginalId,
        messages = msgCollector.getAll()
      )
    } match {
      case Success(oreAggregation) => oreAggregation
      case Failure(f) =>
        msgCollector.add(exception(providerId, f))
        // Return an empty oreAggregation that contains all the messages generated from failed mapping
        emptyOreAggregation.copy(messages = msgCollector.getAll())
    }
  }
}

class JsonMapper extends Mapper[JValue, JsonMapping] {
  override def map(document: Document[JValue], mapping: Mapping[JValue]): OreAggregation = {

    implicit val msgCollector: MessageCollector[IngestMessage] = new MessageCollector[IngestMessage]
    val providerId = (mapping.sidecar(document) \\ "prehashId").extractOrElse[String]("Unknown")

    // Field validation
    val validatedDataProvider = validateDataProvider(mapping.dataProvider(document), providerId)
    val validatedEdmRights = validateEdmRights(mapping.edmRights(document), providerId)
    val validatedIsShownAt = validateIsShownAt(mapping.isShownAt(document), providerId)
    val validatedObject = validateObject(mapping.`object`(document), providerId)
    val validatedPreview = validatePreview(mapping.preview(document), providerId)
    val validatedTitle = validateTitle(mapping.title(document), providerId)
    val validatedOriginalId = validateOriginalId(mapping.originalId(document), providerId)
    val validatedDplaUri = validateDplaUri(mapping.dplaUri(document), providerId)

    validateRights(mapping.rights(document), mapping.edmRights(document), providerId)

    // Recommended field validation
    val validatedCreator = validateRecommendedProperty(mapping.creator(document), "creator", providerId)
    val validatedDate = validateRecommendedProperty(mapping.date(document), "date", providerId)
    val validatedDescription = validateRecommendedProperty(mapping.description(document), "description", providerId)
    val validatedFormat = validateRecommendedProperty(mapping.format(document), "format", providerId)
    val validatedLanguage = validateRecommendedProperty(mapping.language(document), "language", providerId)
    val validatedPlace = validateRecommendedProperty(mapping.place(document), "place", providerId)
    val validatedPublisher = validateRecommendedProperty(mapping.publisher(document), "publisher", providerId)
    val validatedSubject = validateRecommendedProperty(mapping.subject(document), "subject", providerId)
    val validatedType = validateRecommendedProperty(mapping.`type`(document), "type", providerId)

    Try {
      OreAggregation(
        dplaUri = validatedDplaUri,
        dataProvider = validatedDataProvider,
        edmRights = validatedEdmRights,
        hasView = mapping.hasView(document),
        intermediateProvider = mapping.intermediateProvider(document),
        isShownAt = validatedIsShownAt,
        `object` = validatedObject, // full size image
        originalRecord = formatJson(document.get),
        preview = validatedPreview, // thumbnail
        provider = mapping.provider(document),
        sidecar = mapping.sidecar(document),
        sourceResource = DplaSourceResource(
          alternateTitle = mapping.alternateTitle(document),
          collection = mapping.collection(document),
          contributor = mapping.contributor(document),
          creator = validatedCreator,
          date = validatedDate,
          description = validatedDescription,
          extent = mapping.extent(document),
          format = validatedFormat,
          genre = mapping.genre(document),
          identifier = mapping.identifier(document),
          language = validatedLanguage,
          place = validatedPlace,
          publisher = validatedPublisher,
          relation = mapping.relation(document),
          replacedBy = mapping.replacedBy(document),
          replaces = mapping.replaces(document),
          rights = mapping.rights(document),
          rightsHolder = mapping.rightsHolder(document),
          subject = validatedSubject,
          temporal = mapping.temporal(document),
          title = validatedTitle,
          `type` = validatedType
        ),
        originalId = validatedOriginalId,
        messages = msgCollector.getAll()
      )
    } match {
      case Success(oreAggregation) => oreAggregation
      case Failure(f) => {
        msgCollector.add(exception(providerId, f))
        // Return an empty oreAggregation that contains all the messages generated from failed mapping
        emptyOreAggregation.copy(messages = msgCollector.getAll())
      }
    }
  }
}